@startuml

title UpdateUser Repository
autonumber
hide footbox

participant UpdateUserService
participant  UpdateUserRepository #LightSeaGreen

  UpdateUserService->  UpdateUserRepository : UpdateUser(userbo)

  UpdateUserService->  UpdateUserRepository : Create new instance -> DataTable as dsRecords

    UpdateUserRepository ->  UpdateUserRepository : Create new instance -> SqlCommand as cmd by passing ("CreateUserDetail",DBConnectionString)

    UpdateUserRepository ->  UpdateUserRepository : Assign cmd.command as CommandType.StoredProcedure
    
    alt (DBConnectionString.State == ConnectionState.Closed)
        UpdateUserRepository ->  UpdateUserRepository : DBConnectionString.Open()
    end

     UpdateUserRepository -> UpdateUserRepository : Assign userbo to Parameter
UpdateUserRepository -> UpdateUserRepository : Excute.ExecuteNonQuery()


    UpdateUserRepository -> UpdateUserRepository: DBConnectionString.Close()

 UpdateUserRepository-> UpdateUserRepository: Create instance "IsUserUpdated"-> Assign true if atleast one row affected
    
UpdateUserRepository -> UpdateUserRepository: Assign false if 0 rows affected

   UpdateUserRepository -> UpdateUserService: Returns IsUserUpdated


== PSEUDO CODE ==

hnote across

TRY

    ASSIGN DataTable dsRecords = new DataTable()

    ASSIGN SqlCommand cmd = new SqlCommand("UpdateUser",DBConnectionString)
    
    ASSIGN cmd.command = CommandType.StoredProcedure
    
    IF DBConnectionString.State == ConnectionState.Closed
        DBConnectionString.Open()

   Assign Parameter(userbo)
   
   Assign ExecuteNonQuery()
    Assign bool IsUserUpdated

    ASSIGN Values from dsRecords to IsUserUpdated
        DBConnectionString.Close()

    **RETURN IsUserUpdated**

CATCH

    **RETURN ServiceResult { status = ServerError, data = null }**
    
end note


@enduml